"""
実験ID機能のユニットテスト
"""

import pytest
import os
import tempfile
import shutil
from datetime import datetime
from argparse import Namespace

from src.experiments.run_robust_experiment import (
    determine_experiment_id,
    setup_output_directory
)


class TestExperimentID:
    """実験ID決定のテスト"""
    
    def test_experiment_id_from_command_line(self):
        """コマンドライン引数から実験IDを取得"""
        config = {
            'data': {
                'experiment_id': 'yaml_exp'
            }
        }
        args = Namespace(experiment_id='cli_exp')
        
        experiment_id = determine_experiment_id(config, args)
        
        # コマンドライン引数が優先されるべき
        assert experiment_id == 'cli_exp'
    
    def test_experiment_id_from_yaml(self):
        """YAML設定から実験IDを取得"""
        config = {
            'data': {
                'experiment_id': 'yaml_exp'
            }
        }
        args = Namespace(experiment_id=None)
        
        experiment_id = determine_experiment_id(config, args)
        
        # YAML設定が使用されるべき
        assert experiment_id == 'yaml_exp'
    
    def test_experiment_id_autogenerated(self):
        """実験IDの自動生成"""
        config = {
            'data': {
                'experiment_id': None
            }
        }
        args = Namespace(experiment_id=None)
        
        experiment_id = determine_experiment_id(config, args)
        
        # タイムスタンプ形式で生成されるべき
        assert experiment_id.startswith('exp_')
        assert len(experiment_id) == len('exp_YYYYMMDD_HHMMSS')
    
    def test_experiment_id_no_args(self):
        """引数なしで実験IDを決定"""
        config = {
            'data': {
                'experiment_id': 'yaml_exp'
            }
        }
        
        # argsがNoneの場合
        experiment_id = determine_experiment_id(config, args=None)
        
        # YAML設定が使用されるべき
        assert experiment_id == 'yaml_exp'
    
    def test_experiment_id_autogenerated_no_args(self):
        """引数なしで実験IDを自動生成"""
        config = {
            'data': {
                'experiment_id': None
            }
        }
        
        # argsがNoneの場合
        experiment_id = determine_experiment_id(config, args=None)
        
        # タイムスタンプ形式で生成されるべき
        assert experiment_id.startswith('exp_')


class TestOutputDirectory:
    """出力ディレクトリセットアップのテスト"""
    
    def test_setup_output_directory(self):
        """出力ディレクトリの作成"""
        with tempfile.TemporaryDirectory() as tmpdir:
            config = {
                'data': {
                    'base_output_dir': tmpdir
                }
            }
            experiment_id = 'test_exp'
            
            output_dir = setup_output_directory(config, experiment_id)
            
            # 正しいパスが生成されるべき
            expected_path = os.path.join(tmpdir, experiment_id)
            assert output_dir == expected_path
            
            # ディレクトリが実際に作成されるべき
            assert os.path.exists(output_dir)
            assert os.path.isdir(output_dir)
    
    def test_setup_existing_directory(self):
        """既存のディレクトリがある場合"""
        with tempfile.TemporaryDirectory() as tmpdir:
            experiment_id = 'test_exp'
            expected_path = os.path.join(tmpdir, experiment_id)
            
            # ディレクトリを事前に作成
            os.makedirs(expected_path)
            
            config = {
                'data': {
                    'base_output_dir': tmpdir
                }
            }
            
            # エラーなく実行されるべき（exist_ok=True）
            output_dir = setup_output_directory(config, experiment_id)
            
            assert output_dir == expected_path
            assert os.path.exists(output_dir)
    
    def test_nested_experiment_id(self):
        """ネストされた実験IDのテスト"""
        with tempfile.TemporaryDirectory() as tmpdir:
            config = {
                'data': {
                    'base_output_dir': tmpdir
                }
            }
            experiment_id = 'group1/exp001'
            
            output_dir = setup_output_directory(config, experiment_id)
            
            # ネストされたパスが正しく作成されるべき
            expected_path = os.path.join(tmpdir, 'group1', 'exp001')
            assert output_dir == expected_path
            assert os.path.exists(output_dir)

